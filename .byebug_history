continue
params["by_query"]
continue
params
apply_scopes(UnityBasicHealth)
apply_scopes(UnityBasicHealth).last
UnityBasicHealth.last.geocode
UnityBasicHealth.all
apply_scopes(UnityBasicHealth).all
@ubs
continue
params["by_query"]
continue
params["by_query"]
params
continue
response.fullpath
response
response.
response.response
response.response.body
response.body
response
request
request.instance_variable_get(:@ubs)
response.instance_variable_get(:@ubs)
continue
params
continue
response.instance_variable_get(:@ubs)
response..instance_variable_get(:@ubs)
response
response.body
continue
response.query_string
response.query
response.response_code
response.response
response
continue
response.content_type
continue
response.class
JSON.parse(response)
continue
response
request
parsed_request = JSON.parse(request.body.read)
request.body.read
request.body
request
parsed_request = JSON.parse(request.body.read)
parsed_request = JSON.parse(response.body.read)
response.body
parsed_json = JSON.parse(response.body)
continue
response.content_Type
response.Content-Type
response
response.body
continue
ubs.geocode
geocode
ubs
ubs.geocode.reload
ubs.geocode.long
ubs.reload.geocode.long
ubs.reload
ubs.reload.geocode.long
continue
params[:query]
continue
params[:query]
continue
params[:query]
params
continue
params
continue
params
continue
params
continue
params[:query]
continue
ubs.geocode.lat
ubs.geocode
ubs.reload
geocode
ubs
Geocode.last
ubs.geocode
ubs.geocode.lat
continue
params
params[:query]
continue
params[:query]
params
continue
response.body
response.body[:message]
response.body["message"]
response.body
continue
next
params[:query].nil?
params[:query]
continue
params["by_query"].nil?
params["by_query"]
params
continue
@ubs.last.drop(1).first
@ubs.last.drop(1).join(", ").first
@ubs.last.drop(1).join(", ")
@ubs.last.drop(1).join(", ").to_f
@ubs.last.drop(1).join(", ")
@ubs.last.drop(1).to_s
@ubs.last.drop(1),to_s
@ubs.last.drop(1)
@ubs.last.reject{|e| e=~ /str[135]/}
@ubs.last -= %w{str1 str2 str3}
@ubs.last.class
continue
        |m| [ m.geocode.lat, m.geocode.long] 
@ubs.last.map{
@ubs.last[1]
@ubs.last
@ubs.last.map{ |m| [m[1], m[2]]}
@ubs.last.map{ |m| [m[1], m[2]}
continue
@ubs.last[2]
@ubs.last[1]
@ubs[1]
@ubs
continue
@ubs = apply_scopes(UnityBasicHealth).last(10).last.city
@ubs = apply_scopes(UnityBasicHealth).last(10)
continue
params
continue
params
continue
params
continue
params["/basic_unity_healths"]
params["basic_unity_healths"]
params[:basic_unity_healths]
params
continue
params
continue
params
continue
apply_scopes(UnityBasicHealth).last(10)
continue
apply_scopes(UnityBasicHealth).last(10)
params
continue
params
continue
params
continue
@ubs
continue
[ ubs.name, ubs.geocode.lat, ubs.geocode.long]
continue
[ubs.name, ubs.geocode.lat, ubs.geocode.long]
ubs.name, ubs.geocode.lat, ubs.geocode.long
ubs
@ubs.class
@ubs
continue
UnityBasicHealth.by_geocode(lat, long)
continue
UnityBasicHealth.by_geocode(lat, long)
continue
Geocode.where("lat LIKE ? AND long LIKE ?", "%#{-10}%", "%#{-37}%").last(5).map(&:unity_basic_health)
Geocode.where("lat LIKE ? AND long LIKE ?", "%#{-10}%", "%#{-37}%").last(5)
UnityBasicHealth.joins(:geocode).merge(Geocode.where("lat LIKE ? AND long LIKE ?", "%#{-10}%", "%#{-37}%").last(5))
UnityBasicHealth.joins(:geocode).merge(Geocode.where("Geocode.where("lat LIKE ? AND long LIKE ?", "%#{-10}%", "%#{-37}%").last(5))")
UnityBasicHealth.joins(:geocode).merge(Geocode.where("Geocode.where("lat LIKE ? AND long LIKE ?", "%#{-10}%", "%#{-37}%").last(5)")
UnityBasicHealth.joins(:geocode).merge(Geocode.where("lat LIKE ? AND long LIKE ?","%#{-10}%", "%#{-37}%").last(10))
Geocode.where("lat LIKE ? AND long LIKE ?", "%#{-10}%", "%#{-37}%").last(5)
UnityBasicHealth.joins(:geocode).merge(Geocode.where("lat LIKE ? AND long LIKE ?","%#{-10}%", "%#{-37}%").last(10))
UnityBasicHealth.joins(:geocode).merge(Geocode.where("lat LIKE ? AND long LIKE ?","%#{lat.to_f}%", "%#{long.to_f}%").last(10))
long
lat
UnityBasicHealth.joins(:geocode).merge(Geocode.where("lat LIKE ? AND long LIKE ?","%#{lat}%", "%#{long}%").last(10))
UnityBasicHealth.by_geocode(-10.9112370014188, -37.062077522276)
UnityBasicHealth.by_geocode(lat.to_f, long.to_f)
lat.to_f
lat
UnityBasicHealth.by_geocode(lat, long)
continue
UnityBasicHealth.by_geocode(lat, long).class
UnityBasicHealth.by_geocode(lat, long)
continue
UnityBasicHealth.last.geocode.lat
continue
row
continue
row
continue
adaptation_for_seniors
 score_ranking(adaptation_for_seniors)
continue
adaptation_for_seniors
medical_equipment
medice
self
continue
params[:query]
params[:query].join(",")
params[:query]
continue
current_page
